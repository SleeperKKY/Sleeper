package org.sleeper.propclasses.com_manager;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clResponseMessage
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook
//  @ Email : rkdtlsdnr102@naver.com
//
//
// Copyright (C) 2015  Kang Shin Wook
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


/**
 * Make, dissolve response message to/from remote device. Currently, there is no use of making
 * response message since response message is always made and sent from ap by the request message
 * sent from app side. But for future modification, we remain code for making.
 */
public class clResponseMessage extends clMessage {

    private byte ResponseType ;
    public static final byte SUCCESS=0x03 ;
    public static final byte FAIL=0x04 ;

    public clResponseMessage(){

        super() ;
        Header= clMessage.RES ;
    }

    /**
     * set response type of response message after processing request.
     * @param _resType SUCCESS for request processed successfully, FAIL for otherwise.
     */
    public void setResponseType(byte _resType){

        ResponseType=_resType ;
    }

    /**
     * Get response type
     * @return SUCCESS for request processed successfully, FAIL for otherwise.
     */
    public byte getResponseType(){

        return ResponseType ;
    }

    @Deprecated
    @Override
    public String makeMessage(){

        String resMsg=(char)RES+"\n"+(char)ResponseType+"\n"+(char)DeviceID+
                "\n" ;

        //add command
        resMsg+=(char)command ;

        //add data
        if(data!=null) {

            for (int i = 0; i < data.length; i++)
                resMsg += (char) data[i];
        }

        resMsg += "\n";

        return resMsg ;
    }

    @Override
    public void dissolveMessage(String message){

        setResponseType((byte) (message.charAt(2))) ;
        setDeviceID((byte) (message.charAt(4))) ;
        setCommand((byte) (message.charAt(6))) ;

        if(message.length()>7)
            setData(message.substring(7, message.length() - 1).getBytes()) ;
    }
}
