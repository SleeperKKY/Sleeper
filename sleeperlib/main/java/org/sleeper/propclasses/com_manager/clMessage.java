//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clMessage.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook, Kim Hyun Woong, Kim Hyun Woo
//  @ Email : rkdtlsdnr102@naver.com
//

package org.sleeper.propclasses.com_manager;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clMessage.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook
//  @ Email : rkdtlsdnr102@naver.com
//
//
// Copyright (C) 2015  Kang Shin Wook
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

/**
 * Message object to be sent to device.
 *
 * Derived classes: clRequestMessage class, clResponseMessage class
 */
public abstract class clMessage {
	protected byte Header;
	protected byte DeviceID ;
	protected byte[] data ;
	protected byte command ;
	public static final byte REQ = 0x01 ;
	public static final byte RES = 0x02 ;

	/**
	 * Constructor
	 */
	public clMessage(){

		data=null ;
	}

	/**
	 * Set device id that sends device message
	 * @param _Id device id to send
	 */
	public void setDeviceID(byte _Id) {

		DeviceID=_Id ;
	}

	/**
	 * Set data needed for command
	 * @param _data data needed for command
	 */
	public void setData(byte[] _data){

		data=_data ;
	}

	/**
	 * Set device command
	 * @param _command device command to send
	 */
	public void setCommand(byte _command){

		command=_command ;
	}

	/**
	 * Get header type of message
	 * @return header of message
	 */
	public byte getHeader() {

		return Header ;
	}

	/**
	 * Get device id that sends/receive device message
	 * @return device id that sends/receive device message
	 */
	public byte getDeviceID() {

		return DeviceID ;
	}

	/**
	 * Get data for command
	 * @return data for command
	 */
	public byte[] getData(){

		return data ;
	}

	/**
	 * Get command from message
	 * @return command from message
	 */
	public byte getCommand(){

		return command ;
	}

	/**
	 * Make message to send to ap device
	 * @return message to send ap device
	 */
	public abstract String makeMessage() ;

	/**
	 * Dissolve message received from ap device
	 * @param message message to dissolve
	 */
	public abstract void dissolveMessage(String message) ;
}
