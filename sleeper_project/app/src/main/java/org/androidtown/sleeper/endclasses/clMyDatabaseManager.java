package org.androidtown.sleeper.endclasses;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clMyDatabase.java
//  @ Date : 2015-08-13
//  @ Author : Kang Shin Wook, Kim Hyun Woong
//
//


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import org.androidtown.sleeper.propclasses.dataprocessor_manager.clDataProcessor;

public class clMyDatabaseManager implements clDataProcessor.clDatabaseManager.IDbChangeListener {

	//static final String separator="_" ;
	public static final String dataTable ="DataTable" ;
	public static final String colElapseCnt ="ElapseCnt";
	public static final String colTemp ="Temperature";
	public static final String colTime ="Time";
	public static final String colDecisionValue="DecisionValue" ;

	private  int count ;

	public static final String colSleepLevel ="SleepLevel";

	//public static final String viewEmps="ViewEmps";

	private SQLiteOpenHelper parentDBHelper=null ;


	@Override
	public void setDB(SQLiteOpenHelper parentDBHelper) {

        this.parentDBHelper=parentDBHelper ;
	}

	public void insertTable(String tableName, String nullColHack, ContentValues cv) {


		if(tableName.equals(dataTable)) {
			tableName = tableName + Integer.toString(count);
		}

        parentDBHelper.getWritableDatabase().insert(tableName, nullColHack, cv) ;
	}

    synchronized
    public Cursor selectTable(String tableName, String[] columnNames, String where, String[] whereArgs){

        Cursor cur= parentDBHelper.getWritableDatabase().query(tableName, columnNames, where, whereArgs, null, null, null) ;

        return cur ;
    }

	@Override
	public void onInsertSummaryTable(int rowIndex)
	{

		//Log.i("Created Table Name's num",Integer.toString(rowIndex)) ;

        SQLiteDatabase db=parentDBHelper.getWritableDatabase() ;
		//create data table
        db.execSQL("CREATE TABLE " + dataTable + Integer.toString(rowIndex) + " (" + colElapseCnt + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                colTime + " INTEGER, " + colSleepLevel + " INTEGER, " + colTemp + " INTEGER, " +
                colDecisionValue + " INTEGER)") ;

		count=rowIndex ;

        db.close() ;
	}

	@Override
	public void onDeleteSummaryTable(int rowIndex) {

        parentDBHelper.getWritableDatabase().execSQL("DROP TABLE IF EXISTS " + dataTable + Integer.toString(rowIndex)) ;

		count=rowIndex ;

	}
}
