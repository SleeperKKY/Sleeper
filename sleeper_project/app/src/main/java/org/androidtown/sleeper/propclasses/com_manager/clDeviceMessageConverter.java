//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clDeviceMessageConverter.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook, Kim Hyun Woong, Kim Hyun Woo
//  @ Email : rkdtlsdnr102@naver.com
//


package org.androidtown.sleeper.propclasses.com_manager;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clDeviceMessageConverter.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook
//  @ Email : rkdtlsdnr102@naver.com
//
//
//    Copyright (C) 2015  Kang Shin Wook, Kim Hyun Woong, Im Hyun Woo 
//
// 
//   This program is free software; you can redistribute it and/or modify 
//   it under the terms of the GNU General Public License as published by 
//   the Free Software Foundation; either version 2 of the License, or 
//   (at your option) any later version. 
//
// 
//    This program is distributed in the hope that it will be useful, 
//    but WITHOUT ANY WARRANTY; without even the implied warranty of 
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
//    GNU General Public License for more details. 
//
//
//    You should have received a copy of the GNU General Public License along 
//    with this program; if not, write to the Free Software Foundation, Inc., 
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 


/**
 * Device message is sent to remote device encapsulated inside request or response message.
 * This class is inherited by each device-specific message that is understandable for each device
 * that is connected to ap device. Ap device processes wifi message and parse this device specific
 * message area from received message. Then device message object will dissolve message with their
 * own dissolving method. We assume that there will be more than one device connected to controlling device,
 * so connected devices have to be identified so that no duplicate device message can trigger several
 * device to respond.
 */
public abstract class clDeviceMessageConverter {

	protected byte Command ;
	protected byte data ;

    /**
     * Make device message
     * @return device message
     */
	public abstract String makeDeviceMessage();

    /**
     * Dissolve device message
     * @param _ResControlInfo device message to be dissolved
     */
	public abstract void dissolveDeviceMessage(String _ResControlInfo) ;
	/**
	 * Get command from device message
	 */
	public byte getCommand(){

		return Command ;
	}
	/**
	 * Set command in device message to send
	 * @param _Command command to send
	 */
	public void setCommand(byte _Command){

		Command=_Command ;
	}
	/**
	 * Get data from received device message
	 * @return data received from device message
	 */
	public byte getData(){

		return data ;
	}
	/**
	 * Set data in device message
	 * @param _data data to send
	 */
	public void setData(byte _data){

		data=_data;
	}
}
