//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clMessage.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook, Kim Hyun Woong, Kim Hyun Woo
//  @ Email : rkdtlsdnr102@naver.com
//

package org.androidtown.sleeper.propclasses.com_manager;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sleeper
//  @ File Name : clMessage.java
//  @ Date : 2015-09-06
//  @ Author : Kang Shin Wook
//  @ Email : rkdtlsdnr102@naver.com
//
//
//    Copyright (C) 2015  Kang Shin Wook, Kim Hyun Woong, Im Hyun Woo 
//
// 
//   This program is free software; you can redistribute it and/or modify 
//   it under the terms of the GNU General Public License as published by 
//   the Free Software Foundation; either version 2 of the License, or 
//   (at your option) any later version. 
//
// 
//    This program is distributed in the hope that it will be useful, 
//    but WITHOUT ANY WARRANTY; without even the implied warranty of 
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
//    GNU General Public License for more details. 
//
//
//    You should have received a copy of the GNU General Public License along 
//    with this program; if not, write to the Free Software Foundation, Inc., 
//    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 

/**
 * Message object to be sent to device.
 *
 * Derived classes: clRequestMessage class, clResponseMessage class
 */
public abstract class clMessage {
	protected byte Header;
	protected byte DeviceID;
	protected String devMsg;
	public static final byte REQ = 0x01 ;
	public static final byte RES = 0x02 ;

	/**
	 * Constructor
	 */
	public clMessage(){

	}

	/**
	 * Constructor
	 * @param _devID device id to send
	 * @param _devMsg device message to send
	 */
	@Deprecated
	public clMessage(byte _devID, String _devMsg) {

		DeviceID=_devID ;
		devMsg=_devMsg ;
	}

	/**
	 * Set device id that sends device message
	 * @param _Id device id to send
	 */
	public void setDeviceID(byte _Id) {

		DeviceID=_Id ;
	}

	/**
	 * Set device message to send
	 * @param _devMsg device message to send
	 */
	public void setDeviceMessage(String _devMsg){

		devMsg=_devMsg ;
	}

	/**
	 * Get header type of message
	 * @return header of message
	 */
	public byte getHeader() {

		return Header ;
	}

	/**
	 * Get device id that sends/receive device message
	 * @return device id that sends/receive device message
	 */
	public byte getDeviceID() {

		return DeviceID ;
	}

	/**
	 * Get device message
	 * @return device message
	 */
	public String getDeviceMessage(){

		return devMsg ;
	}

	/**
	 * Make message to send to ap device
	 * @return message to send ap device
	 */
	public abstract String makeMessage() ;

	/**
	 * Dissolve message received from ap device
	 * @param message message to dissolve
	 */
	public abstract void dissolveMessage(String message) ;
}
