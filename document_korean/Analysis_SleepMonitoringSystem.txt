
작성자: 강신욱
작성일: 2015.06.22
마지막 수정날짜: 2015.09.13

프로젝트 명: 오픈소스 수면관리 시스템 개발

 예상 이용자: 모든 안드로이드 스마트폰 개발자, 사용자

Requirement & Feature Analysis
 
 - 사용자는 수면 측정을 할 수 있다.(구현완료)
 
   - 수면시간이 시작되면 자동으로 앱의 동작이 시작된다. 앱은 T초(60의 약수) 마다 사용자의 움직임을 가속도 센서를 이용하여 샘플링하며 
   1분동안 샘플링된 움직임에 대한 가속도값의 특징을 가지고 수면종류를 판단한다. 앱이 수면 상태를 계산하고 아두이노로부터 온도데이터를 받는다.
   앱은 전송받은 주변 온도와 수면 상태값, 그리고 이전 데이터들을 저장하고, 이를 이용하여 냉방기를 제어한다.
   /How are we gonna implement this?: We know but seems hard to implement.
   /Is it essential part of our system?: Yes it is.
   
   - 앱은 기본적으로 가속도 센서를 이용해 가속도 값을 가지고 REM, DEEP, AWAKE 인지를 계산해준다.
     20Hz로 동작한다.
 
 - 앱은 다양한 기간동안의 수면 데이터를 다양한 형태의 통계(잘잤는지 못잤는지/온도그래프)로 보여준다. 
 
   - 지난 1일의 수면데이터를 1분 단위로 볼 수 있으며 지난 1주일, 지난 1달 동안의 수면 데이터를 볼 수 있다. 
   
   - 1일 단위의 평균 수면 상태를 보여주고 해당 1일을 선택하면 그 1일동안의 수면 데이터를 1분단위로 볼 수 있다.
   /Is it essential part of our system? : No. We can just show people only sleep graph.
   /How are we gonna implement this? : Using Graphic tool.
   
 - 앱은 냉방기기를 제어할 수 있다.(구현완료)
 
    - 앱은 냉방기기를 자동 모드로 제어한다.
      /What does "자동/수동모드" mean? 수동모드는 사용자가 앱에서 수동으로 냉방기 운전상태를 변경한는 것이다.
      /Is it nessesary part of our system? No, We can just implement automatic mode only.
   
 - 앱의 UI에는 첫 화면으로 수면시간측정 탭이 있다.(구현완료)
 
   - 수면시간측정탭에서는 연결하고자 하는 냉방기를 선택하여 연결하고 수면 시간 측정을 시작할 수 있다.
   
   - 측정시작버튼을 누르면 다른 탭으로 전환되어 측정 상태를 보여준다.
   
   - manualMode_fragment에서 기기제어 메뉴를 볼 수 있다.
   /Is it nessesary part of our system? Yes. This is what our app is for.
   /How are we gonna implement this? Very hard. Maybe most of objects in our app exists for this functionality.
   
 - 앱의 UI에는 통계탭이 있다. (구현완료)
 
  - 통계탭에서는 일별로 수면 측정 기록들이 나열되어 있으며 열을 클릭하면 다른 탭으로 전환되어 그 날의 수면 측정 결과를 알 수 있다.
   /Is it nessesary part of our system? Yes.
   /How are we gonna implement this? Using graphic tools... and maybe there are some tools to draw charts. I have to find out.

 - 앱은 아두이노와 wifi로 통신을 하며 데이터를 주고받는다.(부분구현)
 
   - 전기를 절약하기위해 아두이노는 평상시에 절전모드로 되어있어야 한다.(미구현)
 
   - 연결이 수립되면 와이파이모듈은 아두이노를 wake-up시킨다.(미구현)
	
   - 다른 wifi모듈과 구별하기 위하여 연결이 수립되면 아두이노는 자신의 고유 아이디를 앱으로 전송한다. 아이디는 SLEEPER_기기종류(FAN,AIRCOND...대문자로)_16진수번호(구현)
   
   - 앱과 아두이노는 모든 데이터는 REQUEST, RESPONSE 메세지를 서로 주고받으며 통신한다. 통신은 다른 동작들과는 다른 스레드에서 동작하여 다른 동작들의 동작이 멈추지 않도록 한다.(구현) 
	
   - 요청 메세지는 기기에서 데이터를 가져오거나 동작을 명령한다. "REQ/n제어할 기기/cr/n<명령SPACE16진수8비트데이터>/cr/n" 형태로 되어있다.
     모든 헤더와 데이터는 8bit값으로 치환된다.(구현)
   
   - 응답 메세지는 요청 결과물을 반환한다 "RES/n응답타입(SUCCESS,FAIL)/n메세지보낸기기/cr/n<명령SPACE16진수8bit요청데이터>/cr/n 형태로 되어있다.(구현)
     
   - <..>부분은 각 부분 장치들끼리 알아들을 수 있는 형태로 자유롭게 만들 수 있다. 대신 주는 부분과 받는 부분의 형식은 같다.(구현)
    /Is it essential part of our system? : Communication yes but We dont have to implement one Request, one Response protocol. 
    /How are we gonna implement this? : Using thread.
	
   - 아두이노에서는 특정 기기의 기능을 모두 명령어 형태로 저장하고 있다. 앱에서 이 명령어들을 보내면 아두이노는 그 명령을 해석하여 알맞은 기기를 동작시킨다(구현)
    
   
모듈

 스마트폰
 
  - 통신 관리자: 아두이노와 앱간의 통신(메세지 만들기, 해석...) 관리
 
  - 통계 관리자: 여러가지 통계(수면 그래프, 온도 그래프...)형태의 데이터를 관리한다.
  
  - 데이터 처리 관리자: 데이터의 처리, 저장, 추출, 처리한 결과를 가지고 기기동작을 명령한다.
  
  - 액티비티: 모든 모듈들에 접근하여 처리를 수행한다.
  
 아두이노
 
  - 통신 관리자: 아두이노와 앱간의 통신(메세지 만들기, 해석...) 관리
  
  - 냉방기 제어 관리자: 냉방기를 제어한다.
 
Use Case : Use Case Diagram에서 나온 Use Case들을 구체적으로 기술한다.

 #1 수면 데이터 측정  
  1. 사용자는 "Start"버튼을 누르면 fragment_during_sleeping 창이 띄워진다.
  2. 앱 관리자는 수면 모드를 시작한다.
   2.1. 앱 관리자는 앱에게 수면 모드를 시작하라고 명령한다.
   2.2. 앱 관리자가 데이터 처리 관리자한테 측정을 시작하라고 한다.
    2.2.1. 데이터 처리 관리자는 데이터베이스의 datatable_summary 테이블에 시작 날짜와 시작 시간을 넣는다.
	2.2.2. 데이터 처리 관리자는 수면상태분류기를 데이터 타이머에 등록시킨다.
	2.2.3. 사용자의 데이터 처리 관리자도 데이터 타이머에 등록시킨다.
   2.4. 데이터 타이머는 각 리스너의 주기에 맞춰서 리스너를 실행해준다.
    2.4.1 사용자 데이터 처리 관리자는 데이터 타이머를 이용하여 50ms마다 onSensorChanged이벤트가 발생하여 가속도 센서에서 X,Y,Z 값을 가져와서 SleepLevelValue을 만들어 
        intensityList에 계속 더해준다.
	2.4.3. 1분만다 onEveryElapse이벤트가 발생되면 데이터 처리자는 1분동안 구한 intensity average와 pim 값으로 svm을 이용해 수면 상태를 도출해내고 가속도 데이터 리스너에
	       이벤트를 발생시킨다.
	2.4.4. 가속도 데이터 리스너는 수면상태값을 큐에 저장해둔다.
    2.6.1. 통신관리자는 아두이노에 온도데이터 요청 메세지를 보낸다.
	2.6.2. 통신관리자는 아두이노로부터 응답을 일정 시간동안 기다린다.
	 ex 2.6.2.
	 2.6.2. 응답이 오지 않으면 통신관리자는 앱 관리자의 OnResponseTimeoutEvent를 발생시킨다.
	 2.6.3. 앱 관리자의 OnResponseTimeoutEvent에서 "응답 시간 초과" 메세지를 앱에 띄운다.
	 2.6.4. 통신관리자는 2~3번 4.6.1.부터 반복한다.
	 2.6.5. 2~3번 OnResponseTimeoutEvent가 호출되면 통신관리자는 스레드를 종료한다.
	2.6.3. 아두이노는 메세지를 통신관리자로부터 수신한 뒤 아두이노는 데이터 관리자로부터 온도 데이터를 만들어 다시 앱으로 전송한다.
    2.6.4. 통신관리자에서 아두이노로부터 온도 데이터가 담긴 메세지를 받는다.
	2.6.5. 통신관리자는 앱 관리자의 onMessageRetrievedEvent를 발생시킨다.
	2.6.6. 큐에서 수면 상태 값을 하나 가져오고 온도값과 상태 변화값(호전,악화, 변화없음1, 변화없음2)을 가지고 현재 수행할 명령을 도출한다.
    2.6.9. 아두이노는 명령을 수행한 뒤 결과 메세지를 만들어 앱에 전송한다.
	2.6.10. 통신관리자에서 결과 메세지를 받는다.
	2.6.11. 통신관리자는 앱 관리자의 onMessageRetrievedEvent를 발생시킨다.
    2.6.12. 앱 관리자는 결과를 처리한다.
    2.6.13. 송수신 스레드에서 온도데이터를 수신하면 가속도데이터리스너에 onMessageRetrievedEvent이벤트가 발생한다.
	2.6.14. 통신 스레드가 종료된다.
	2.7.15. 결정값으로 냉방기에 명령을 수행시킨 뒤 SleepLevel, 온도데이터, FeedbackValue를 데이터베이스에 저장한다.
  3. 일어날 시간이 되면 앱 관리자는 앱을 이용하여 셋팅되어진 알람을 울린다.
  4. 앱 관리자는 데이터 처리 관리자한테 측정을 그만두라고 명령한다.
  5. 데이터 처리 관리자는 측정을 그만둔다.
   5.1. 데이터 처리 관리자는 측정 시작할 때 만들어진 datatable_summary의 행에 종료 시간을 넣는다.
  
 #2 통계 출력/생성
  1. 사용자는 통계탭을 클릭한다.
  2. 현재까지 측정한 데이터들을 볼 수 있는 목록이 나타난다.
  3. 목록에서 날짜를 선택한다.
  4. 유저의 데이터처리관리자에서 선택된 날짜에 대한 통계를 만든다.
  5. 새로운 프래그먼트를 만들고 통계 관리자를 이용해 페이지를 구성한다.
  2. 액티비티는 데이터 처리 관리자에서 x축 레이블, y축 레이블, y축 값들(온도, 수면 데이터)이 담겨있는 통계관리자를 가져온다.
  3. 액티비티 GUI에게 계산된 결과를 그래픽으로 출력하라고 명령한다.
  4. 액티비티는 통계관리자를 이용해 입력된 형식에 따른 통계형 데이터를 만든다(변형시킨다).
  6. 사용자는 CheckBox를 이용하여 옵션을 선택한다.
   6.1. 수면그래프, 수면그래프/온도그래프 등등의 그래프 종류를 선택한다.
  7. CheckBox가 선택되면 앱 관리자에 이벤트가 발생한다.
  8. 앱 관리자는 3~7과정을 다시 수행한다.

 
 #3 냉방기 제어한다.
  1. 사용자/앱은 아두이노에 냉방기에 명령을 보낸다.
   alt1.
    1.1. 냉방기를 켜라는 명령을 보낸다.
    1.2. 냉방기를 꺼라는 명령을 보낸다.
	1.3. 냉방기의 PWM(바람 세기)을 변경하라는 명령을 보낸다.
  2. 앱 관리자는 명령을 메세지로 만들고 전송한다.
  3. 아두이노는 명령을 수행한 뒤 수행 결과를 만든다.
  4. 수행결과를 메세지로 만들고 앱에 전송한다.
  5. 사용자/앱은 메세지를 확인/처리한다.

 #6 기본 셋팅
  1. 사용자가 어플을 켠다.
  2. 액티비티는 수면 측정 화면을 보여준다.
   2.1. 자동 모드를 보여준다.
  3. 사용자는 연결할 기기를 선택한다. 그리고 연결한다.
  4. 연결을 수립하면 wifi mac 주소를 이용해 아두이노에 연결된 wifi 모듈에 전송되고 그 wifi 모듈은 아두이노를 깨운다.
  5. 첫 화면의 TextView에 연결된 기기의 이름을 보여준다.
	
		
객체 후보

 앱
  앱 관리자, 데이터 처리 관리자, 데이터 보관 관리자, Gui, 통신관리자, 메세지, 수면종류데이터, 타이머, 통계 관리자 
 
 아두이노
  통신관리자, 메세지, 냉방기 제어 관리자
	